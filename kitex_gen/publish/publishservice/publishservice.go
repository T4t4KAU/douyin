// Code generated by Kitex v0.6.2. DO NOT EDIT.

package publishservice

import (
	"context"
	publish "douyin/kitex_gen/publish"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return publishServiceServiceInfo
}

var publishServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "PublishService"
	handlerType := (*publish.PublishService)(nil)
	methods := map[string]kitex.MethodInfo{
		"PublishAction":         kitex.NewMethodInfo(publishActionHandler, newPublishServicePublishActionArgs, newPublishServicePublishActionResult, false),
		"PublishCount":          kitex.NewMethodInfo(publishCountHandler, newPublishServicePublishCountArgs, newPublishServicePublishCountResult, false),
		"PublishList":           kitex.NewMethodInfo(publishListHandler, newPublishServicePublishListArgs, newPublishServicePublishListResult, false),
		"PublishExist":          kitex.NewMethodInfo(publishExistHandler, newPublishServicePublishExistArgs, newPublishServicePublishExistResult, false),
		"PublishInfo":           kitex.NewMethodInfo(publishInfoHandler, newPublishServicePublishInfoArgs, newPublishServicePublishInfoResult, false),
		"PublishVideoList":      kitex.NewMethodInfo(publishVideoListHandler, newPublishServicePublishVideoListArgs, newPublishServicePublishVideoListResult, false),
		"PublishListByLastTime": kitex.NewMethodInfo(publishListByLastTimeHandler, newPublishServicePublishListByLastTimeArgs, newPublishServicePublishListByLastTimeResult, false),
		"FeedAction":            kitex.NewMethodInfo(feedActionHandler, newPublishServiceFeedActionArgs, newPublishServiceFeedActionResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "publish",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.6.2",
		Extra:           extra,
	}
	return svcInfo
}

func publishActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*publish.PublishServicePublishActionArgs)
	realResult := result.(*publish.PublishServicePublishActionResult)
	success, err := handler.(publish.PublishService).PublishAction(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPublishServicePublishActionArgs() interface{} {
	return publish.NewPublishServicePublishActionArgs()
}

func newPublishServicePublishActionResult() interface{} {
	return publish.NewPublishServicePublishActionResult()
}

func publishCountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*publish.PublishServicePublishCountArgs)
	realResult := result.(*publish.PublishServicePublishCountResult)
	success, err := handler.(publish.PublishService).PublishCount(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPublishServicePublishCountArgs() interface{} {
	return publish.NewPublishServicePublishCountArgs()
}

func newPublishServicePublishCountResult() interface{} {
	return publish.NewPublishServicePublishCountResult()
}

func publishListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*publish.PublishServicePublishListArgs)
	realResult := result.(*publish.PublishServicePublishListResult)
	success, err := handler.(publish.PublishService).PublishList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPublishServicePublishListArgs() interface{} {
	return publish.NewPublishServicePublishListArgs()
}

func newPublishServicePublishListResult() interface{} {
	return publish.NewPublishServicePublishListResult()
}

func publishExistHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*publish.PublishServicePublishExistArgs)
	realResult := result.(*publish.PublishServicePublishExistResult)
	success, err := handler.(publish.PublishService).PublishExist(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPublishServicePublishExistArgs() interface{} {
	return publish.NewPublishServicePublishExistArgs()
}

func newPublishServicePublishExistResult() interface{} {
	return publish.NewPublishServicePublishExistResult()
}

func publishInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*publish.PublishServicePublishInfoArgs)
	realResult := result.(*publish.PublishServicePublishInfoResult)
	success, err := handler.(publish.PublishService).PublishInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPublishServicePublishInfoArgs() interface{} {
	return publish.NewPublishServicePublishInfoArgs()
}

func newPublishServicePublishInfoResult() interface{} {
	return publish.NewPublishServicePublishInfoResult()
}

func publishVideoListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*publish.PublishServicePublishVideoListArgs)
	realResult := result.(*publish.PublishServicePublishVideoListResult)
	success, err := handler.(publish.PublishService).PublishVideoList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPublishServicePublishVideoListArgs() interface{} {
	return publish.NewPublishServicePublishVideoListArgs()
}

func newPublishServicePublishVideoListResult() interface{} {
	return publish.NewPublishServicePublishVideoListResult()
}

func publishListByLastTimeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*publish.PublishServicePublishListByLastTimeArgs)
	realResult := result.(*publish.PublishServicePublishListByLastTimeResult)
	success, err := handler.(publish.PublishService).PublishListByLastTime(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPublishServicePublishListByLastTimeArgs() interface{} {
	return publish.NewPublishServicePublishListByLastTimeArgs()
}

func newPublishServicePublishListByLastTimeResult() interface{} {
	return publish.NewPublishServicePublishListByLastTimeResult()
}

func feedActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*publish.PublishServiceFeedActionArgs)
	realResult := result.(*publish.PublishServiceFeedActionResult)
	success, err := handler.(publish.PublishService).FeedAction(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPublishServiceFeedActionArgs() interface{} {
	return publish.NewPublishServiceFeedActionArgs()
}

func newPublishServiceFeedActionResult() interface{} {
	return publish.NewPublishServiceFeedActionResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) PublishAction(ctx context.Context, req *publish.PublishActionRequest) (r *publish.PublishActionResponse, err error) {
	var _args publish.PublishServicePublishActionArgs
	_args.Req = req
	var _result publish.PublishServicePublishActionResult
	if err = p.c.Call(ctx, "PublishAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PublishCount(ctx context.Context, req *publish.PublishCountRequest) (r *publish.PublishCountResponse, err error) {
	var _args publish.PublishServicePublishCountArgs
	_args.Req = req
	var _result publish.PublishServicePublishCountResult
	if err = p.c.Call(ctx, "PublishCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PublishList(ctx context.Context, req *publish.PublishListRequest) (r *publish.PublishListResponse, err error) {
	var _args publish.PublishServicePublishListArgs
	_args.Req = req
	var _result publish.PublishServicePublishListResult
	if err = p.c.Call(ctx, "PublishList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PublishExist(ctx context.Context, req *publish.PublishExistRequest) (r *publish.PublishExistResponse, err error) {
	var _args publish.PublishServicePublishExistArgs
	_args.Req = req
	var _result publish.PublishServicePublishExistResult
	if err = p.c.Call(ctx, "PublishExist", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PublishInfo(ctx context.Context, req *publish.PublishInfoRequest) (r *publish.PublishInfoResponse, err error) {
	var _args publish.PublishServicePublishInfoArgs
	_args.Req = req
	var _result publish.PublishServicePublishInfoResult
	if err = p.c.Call(ctx, "PublishInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PublishVideoList(ctx context.Context, req *publish.PublishVideoListRequest) (r *publish.PublishVideoListResponse, err error) {
	var _args publish.PublishServicePublishVideoListArgs
	_args.Req = req
	var _result publish.PublishServicePublishVideoListResult
	if err = p.c.Call(ctx, "PublishVideoList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PublishListByLastTime(ctx context.Context, req *publish.PublishListByLastTimeRequest) (r *publish.PublishListByLastTimeResponse, err error) {
	var _args publish.PublishServicePublishListByLastTimeArgs
	_args.Req = req
	var _result publish.PublishServicePublishListByLastTimeResult
	if err = p.c.Call(ctx, "PublishListByLastTime", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FeedAction(ctx context.Context, req *publish.FeedActionRequest) (r *publish.FeedActionResponse, err error) {
	var _args publish.PublishServiceFeedActionArgs
	_args.Req = req
	var _result publish.PublishServiceFeedActionResult
	if err = p.c.Call(ctx, "FeedAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
